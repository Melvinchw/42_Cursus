Table of Content
1. Overview
2. About MiniLibx
3. Project Requirement
4. Pseudo Code
5. Reflection

Overview(Header)
So_long is a project where we are tasked to program a 2D game in C Language in conjunction with MiniLibx(API). We are supposed to take in 2 arguments which are the executable and a .ber file which is the map for them game. To simplify things, the concept is like PACMAN where the first part of the project requires the player to collect coins and find the exit to win the game. The bonus part of the project requires the player to collect coins similar to part 1 while evading the enemies that are lurking around the map.

About MiniLibx(Header)
Minilibx is a library abstracted from the original X Window System for students of 42 as an introduction to graphics programming. This library allows student to easily create a graphical software wihtout any prior X Window programming knowledge. As such, one only has to use the functions that is provided within the library to initialize the X Terminal, Window and create a loop for displaying graphics. In the context of so_long, below are the set of functions I have used to complete so_long:

- Mandatory
mlx_init()
mlx_new_woindow()
mlx_key_hook()
mlx_xpm_file_to_image()
mlx_put_img_to_window()
mlx_loop()

- Bonus
mlx_loop_hook()
mlx_string_put()

Project Requirement(Header)
The project requires us to code in 2 parts namely: Mandatory & Bonus. In the mandatory portion, it should perform the following:

Mandatory(Header)
- Handle events when directional keys(W,S,A,D) are pressed.
- Exit game when escape key is pressed.
- Exit game in victory when all coins have been collected.
- Handle the following requirement:
	- Correct number of inputs.
	- Correct file format.
	- Correct number of tokens.
		1 player, 1 exit, at least 1 coins.
	- Map MUST be valid. Have correct elements.
	- Map MUST surrounded by walls.
	- Map MUST be rectangular.
	- Map must contain a unique path to exit.
	- Map MUST NOT be empty.
	- Terminal must display move counter. Display invalid move when a wrong key is pressed.
- Symbol for each element should be as follow:
	'P' = Player
	'C' = Coins
	'E' = Exit
	'1' = Walls
	'0' = Floor

Bonus(Header)
Adding on to what has been coded, it should consists of 3 extra things and not restricted to more:
- Roaming enemy.
- Move counter displayed on window.
- Animation of elements(coins, player, enemies)

Pseudo COde(Header)
I have split the code into 5 main parts namely: 
- Main Function
In this part of the code, this is where the main function resides where argc, argv is used. It checks for the correct number of inputs. Followed by whether the map file being opened is of the correct format. Once these conditions are met, it proceeds to initialize the game. That will be where the meat of the code resides where functions from MiniLibx is used.

- Initialize game
In this part of the code, with functions from MiniLibx used to create a loop to initialize, display and continuously run the game window. I have further broken down the code into 3 sub functions namely: 
	- Map Check
	This part of the code checks the validity of the map: Is it a valid map? & is it empty?. Once these conditions are fulfilled, it then proceed to check all the game conditions as stated above.
	- Game Conditions
	This part of the code checks whether game requirement as stipulated by the project is met:
		- Is it surrounded by walls?
		- Is it rectangular?
		- Does it have the correct number of tokens?
		- Does it have a path to exit with all the coins collected?
	Once all conditions are met, it then proceeds to initialize all the structures that have been declared.
	- Initialize structure
	In this part of the code, a main structure named window is declared to house the rest of the structure: player and img. It is also where the mlx ptr and win ptr is located. This portion of the code also consists of a functions 
	To start filling the map onto the screen, a loop is called to iterate through the map array to place all the tokens within the map.
	- Render Map
	After the images have been loaded, the map is iterated where a function is used to put the specific image of each element onto the window.

- Handle events
In the previous initialization and rendering, all items displayed on the window are static. This portion of the code aims to update each event ranging from movement to exting with an event handler made possible by mlx_key_hook(). This updates the position of each element and images real time.

Handle Errors
In the event that any error is encountered within map check and game conditions, this function will be called to handle it accordingly. As stipulated, each error will result in a certain action ranging from exiting to freeing all relavant dynamically allocated memory to prevent memory leak.

Reflection
This was a long and arduous journey. It was indeed so long! Work has not been kind as stuff has been piling up. This reduced the amount of free time I have to properly code/study. Coupled with family matters to tend to, it made heading to school even harder. Fortunately, when I do go to school I bumped into friends who were not just willing to teach and share, but also helped to debug and provided new insights on what might be wrong. The lack of any of it would have set me back further on the completion of this project. Special shout out to Mervin and Richard for some resources to start with and Mohsin for letting me bounce ideas off you even though most of the time I was kind of talking to myself. Through this entire project, I've learnt that I can actually do it if i stare at the code long enough. Perservere enough and not give up. People ask me why I did not choose to do fractol when there's so much resources online compared to so_long. My answer was 'I want to code something that my loved ones can try'. Till date, I have not regretted a single bit of it. Not forgetting my lovely partner who keeps chanting she believes in me along the entire journey. Sweet victory albeit all the complains and whining. So there you go, my own version of a mario-pacman like game! Time to have a 3 days rest before tackling push swap :,). 42 Oui!